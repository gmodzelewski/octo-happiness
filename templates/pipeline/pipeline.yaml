{{- if not .Values.pipelineDisabled }}
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: {{ include "app.fullname" . }}-build
spec:
  tasks:
    ##------------------------------------------------------------------
    # Git clone task
    ##------------------------------------------------------------------
    - name: git-clone
      params:
        - name: url
          value: "{{ include "app.srcGit" . }}"
        - name: revision
          value: main
        - name: submodules
          value: 'true'
        - name: depth
          value: '1'
        - name: sslVerify
          value: 'true'
        - name: deleteExisting
          value: 'true'
        - name: verbose
          value: 'true'
        - name: gitInitImage
          value: >-
            registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:cadf614a6044ee37397de3abe7674827ecab225e7fac9fb123eff5473e2c4003
        - name: userHome
          value: /tekton/home
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: source
    ##------------------------------------------------------------------
    # Set app version in java build
    ##------------------------------------------------------------------
    - name: set-version
      params:
        - name: MAVEN_IMAGE
          value: >-
            image-registry.openshift-image-registry.svc:5000/openshift/java:latest
        - name: GOALS
          value:
            - versions:set
            - -DnewVersion=${params.IMAGE_TAG}
        - name: PROXY_PROTOCOL
          value: http
        - name: CONTEXT_DIR
          value: .
      runAfter:
        - git-clone
      taskRef:
        kind: ClusterTask
        name: maven
      workspaces:
        - name: source
          workspace: source
        - name: maven-settings
          workspace: maven-settings
    ##------------------------------------------------------------------
    # Create application artifact
    ##------------------------------------------------------------------
    - name: package
      params:
        - name: MAVEN_IMAGE
          value: >-
            image-registry.openshift-image-registry.svc:5000/openshift/java:latest
        - name: GOALS
          value:
            - package
        - name: PROXY_PROTOCOL
          value: http
        - name: CONTEXT_DIR
          value: .
      runAfter:
        - set-version
      taskRef:
        kind: ClusterTask
        name: maven
      workspaces:
        - name: source
          workspace: source
        - name: maven-settings
          workspace: maven-settings
    ##------------------------------------------------------------------
    # Deploy via Dockerfile
    ##------------------------------------------------------------------
    # - name: kaniko
    #   params:
    #     - name: IMAGE
    #       value: >-
    #         image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/{{ include "app.fullname" . }}:$(params.IMAGE_TAG)
    #     - name: DOCKERFILE
    #       value: ./Dockerfile
    #     - name: CONTEXT
    #       value: ./
    #     - name: EXTRA_ARGS
    #       value: []
    #     - name: BUILDER_IMAGE
    #       value: >-
    #         gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
    #   runAfter:
    #     - package
    #   taskRef:
    #     kind: Task
    #     name: kaniko
    #   workspaces:
    #     - name: source
    #       workspace: source
    - name: build-image
      params:
        - name: IMAGE
          value: $(params.IMAGE_NAME):$(params.IMAGE_TAG)
        - name: BUILDER_IMAGE
          value: >-
            quay.io/buildah/stable:latest
        - name: STORAGE_DRIVER
          value: vfs
        - name: DOCKERFILE
          value: Dockerfile
        - name: CONTEXT
          value: .
        - name: TLSVERIFY
          value: 'false'
        - name: FORMAT
          value: oci
        - name: BUILD_EXTRA_ARGS
          value: ''
        - name: PUSH_EXTRA_ARGS
          value: ''
      taskRef:
        kind: ClusterTask
        name: buildah
      runAfter:
        - package
        # - kube-linter
      workspaces:
        - name: source
          workspace: source
    ##------------------------------------------------------------------
    # rhacs checks
    ##------------------------------------------------------------------
    # - name: git-clone-helm
    #   params:
    #     - name: url
    #       value: "{{ include "app.helmGit" . }}"
    #     - name: revision
    #       value: main
    #     - name: submodules
    #       value: 'true'
    #     - name: depth
    #       value: '1'
    #     - name: sslVerify
    #       value: 'true'
    #     - name: deleteExisting
    #       value: 'true'
    #     - name: verbose
    #       value: 'true'
    #     - name: gitInitImage
    #       value: >-
    #         registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:cadf614a6044ee37397de3abe7674827ecab225e7fac9fb123eff5473e2c4003
    #     - name: userHome
    #       value: /tekton/home
    #   taskRef:
    #     kind: ClusterTask
    #     name: git-clone
    #   workspaces:
    #     - name: output
    #       workspace: source-helm
    # - name: kube-linter
    #   runAfter:
    #   - git-clone-helm
    #   taskRef:
    #     name: kube-linter
    #   workspaces:
    #     - name: source
    #       workspace: source-helm
    #   params:
    #     - name: manifest
    #       value: .
    #     - name: default_option
    #       value: do-not-auto-add-defaults # or add-all-built-in
    #     - name: includelist
    #       value: "no-extensions-v1beta,default-service-account,no-readiness-probe"
    # - name: image-scan
    #   taskRef:
    #     name: rhacs-image-scan
    #     kind: Task
    #   params:
    #   - name: image
    #     value: "image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/{{ include "app.fullname" . }}@$(tasks.build-image.results.IMAGE_DIGEST)"
    #   - name: rox_api_token
    #     value: {{ include "app.fullname" . }}-pipeline-config
    #   - name: rox_central_endpoint
    #     value: {{ include "app.fullname" . }}-pipeline-config
    #   - name: output_format
    #     value: table
    #   - name: insecure-skip-tls-verify
    #     value: true
    #   runAfter:
    #     - build-image
    # - name: image-check
    #   taskRef:
    #     name: rhacs-image-check
    #     kind: Task
    #   params:
    #   - name: image
    #     value: "image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/{{ include "app.fullname" . }}@$(tasks.build-image.results.IMAGE_DIGEST)"
    #   - name: rox_api_token
    #     value: {{ include "app.fullname" . }}-pipeline-config
    #   - name: rox_central_endpoint
    #     value: {{ include "app.fullname" . }}-pipeline-config
    #   - name: insecure-skip-tls-verify
    #     value: true
    #   runAfter:
    #     - build-image
  ##------------------------------------------------------------------
  # notify on slack
  ##------------------------------------------------------------------
  # finally:
  #   - name: notify-slack-test
  #     params:
  #       - name: webhook-secret
  #         value: {{ include "app.fullname" . }}-slack-webhook
  #       - name: message
  #         value: "Build of {{ include "app.fullname" . }} completed."
  #     taskRef:
  #       name: send-to-webhook-slack
  ##------------------------------------------------------------------
  # Workspace definitions
  ##------------------------------------------------------------------
  workspaces:
    - name: source
      optional: false
    - name: source-helm
      optional: false
    - name: maven-settings
      optional: false
  ##------------------------------------------------------------------
  # Parameters definitions
  ##------------------------------------------------------------------
  params:
    - default: latest
      description: The version of the application
      name: IMAGE_TAG
      type: string
    - default: {{ include "app.image" . }}
      name: IMAGE_NAME
      type: string
  resources: []
{{- end }}